user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
events {}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    server {
        listen 80;
        server_name localhost;

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name localhost;

        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;

        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
        ssl_prefer_server_ciphers on;

        root /usr/share/nginx/html;
        index index.html index.htm;

        location = /accedi{
            try_files /login.html = 404;
        }
        location = /registrati{
            try_files /register.html = 404;
        }
        location = /carrello{
            try_files /cart.html = 404;
        }
        #product page
        location ~ ^/prodotti/[^/]+/[^/]+$ {
            try_files $uri $uri/ /product.html;
        }
        #category page or artisan product page
        location ~ ^/prodotti/[^/]+$ {
            try_files $uri $uri/ /products.html;
        }
        location = /prodotti{
            try_files /products.html = 404;
        }
        
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        location /users/ {
            # IMPORTANTE: Se Nginx Ã¨ in un container Docker separato dal tuo Node.js proxy,
            # usa il NOME DEL SERVIZIO del tuo proxy Node.js (es. 'backend_proxy')
            # invece di 'localhost'.
            # Esempio: proxy_pass http://backend_proxy:3000/users/;
            
            proxy_pass http://localhost:3000/users/; # Inoltra le richieste /users/ al proxy Node.js
            
            # Impostazioni standard per proxy pass
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Aumenta i timeout per prevenire errori 504
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            send_timeout 300s;
        }
        # Attiva solo se usi il microservizio
        # location /users-service/ {
        #     proxy_pass http://microservice_users:4001/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        # }
    }
}
